addClassPath(ScriptPath + "jfreechart-1.0.19.jar");
addClassPath(ScriptPath + "jcommon-1.0.23.jar"); 
addClassPath(ScriptPath + "commons-io-2.6.jar"); 

import javax.swing.JFrame;
import org.jfree.chart.*;
import org.jfree.chart.plot.*;
import org.jfree.data.xy.*;
import org.jfree.chart.renderer.xy.*;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.title.*;
import org.apache.commons.io.FileUtils;

// String sSaveFolder = "D:\\BTisler\\temp\\PrintProfile\\";
String sSaveFolder = System.getProperty("java.io.tmpdir",".") + "\\PrintProfile\\";

int i;

String sCfgChartName  = "PrtProfile";
String sCfgResolution = "2";
String sCfgFieldName  = "1";

String sChartName;
String sXNameAndUnit;
String sYUnit;
String sY1Name;
String sY2Name;
String sY3Name;
String sY4Name;
String sY5Name;
String sY6Name;
String sY7Name;
String sY8Name;
String sY9Name;

boolean bY1 = false;
boolean bY2 = false;
boolean bY3 = false;
boolean bY4 = false;
boolean bY5 = false;
boolean bY6 = false;
boolean bY7 = false;
boolean bY8 = false;
boolean bY9 = false;

JTextField textCfgChartName; 
JTextField textCfgResolution;
JTextField textCfgFieldName;

JCheckBox checkY1Show;
JCheckBox checkY2Show;
JCheckBox checkY3Show;
JCheckBox checkY4Show;
JCheckBox checkY5Show;
JCheckBox checkY6Show;
JCheckBox checkY7Show;
JCheckBox checkY8Show;
JCheckBox checkY9Show;

XYSeries seriesY1;
XYSeries seriesY2;
XYSeries seriesY3;
XYSeries seriesY4;
XYSeries seriesY6;
XYSeries seriesY7;
XYSeries seriesY8;
XYSeries seriesY9;

JFrame sFrameChart;
JPanel sMainPanel;
JMenuBar menuBar;
JMenu menuFile;
JMenuItem menuItemSave;
JMenuItem menuItemFilter;
JMenuItem menuItemOption;

File fileOut;
File dirOut;
int iFileNum = 0;
boolean bFileOutIsOpen = false;
String s;

boolean bNewProto = false;

ActionListener alSave = new ActionListener() {
    public void actionPerformed( ActionEvent e ) {
        JFileChooser fc = new JFileChooser();
        // fc.setCurrentDirectory(new java.io.File("."));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showSaveDialog(sFrameChart);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileUtils.copyDirectory(dirOut, fc.getSelectedFile());
        }        
    }
};

ActionListener alFilter = new ActionListener() {
    public void actionPerformed( ActionEvent e ) {       
        JDialog dialog = new JDialog(sFrameChart);
        JPanel panel = new JPanel(new GridLayout(0, 1));
        dialog.add(panel);
        
        if (bY1) {panel.add(checkY1Show);}
        if (bY2) {panel.add(checkY2Show);}
        if (bY3) {panel.add(checkY3Show);}
        if (bY4) {panel.add(checkY4Show);}
        if (bY5) {panel.add(checkY5Show);}
        if (bY6) {panel.add(checkY6Show);}
        if (bY7) {panel.add(checkY7Show);}
        if (bY8) {panel.add(checkY8Show);}
        if (bY9) {panel.add(checkY9Show);}
        
        dialog.pack();
        dialog.setModal(true);
        dialog.setVisible(true);
    }
};

ActionListener alSaveOption = new ActionListener() {
    public void actionPerformed( ActionEvent e ) {     
        fileCfg = openFile(System.getProperty("java.io.tmpdir",".") + "\\XYChart.cfg");
        fileCfg.delete();
        
        s = textCfgChartName.getText() + "\n";
        write(fileCfg, s.getBytes());
        s = textCfgResolution.getText() + "\n";
        write(fileCfg, s.getBytes());
        s = textCfgFieldName.getText() + "\n";
        write(fileCfg, s.getBytes());
        
        close(fileCfg);
        write("FHXAA-r" + textCfgResolution.getText());
        write("FHXBA-r" + textCfgFieldName.getText());
    }
};
 
ActionListener alOption = new ActionListener() {
    public void actionPerformed( ActionEvent e ) {       
        JDialog dialog = new JDialog(sFrameChart);
        JPanel panel = new JPanel(new GridLayout(0, 1));
        dialog.add(panel);
        
        panel.add(textCfgChartName);
        
        JLabel labelCfgRes = new JLabel("Resolution:");
        panel.add(labelCfgRes);
        panel.add(textCfgResolution);

        JLabel labelCfgFieldName = new JLabel("FieldName:");
        panel.add(labelCfgFieldName);
        panel.add(textCfgFieldName);
        
        JButton button = new JButton("OK");
        button.addActionListener(alSaveOption);
        panel.add(button);
        
        dialog.pack();
        dialog.setModal(true);
        dialog.setVisible(true);
    }
};

String sFileCfg = System.getProperty("java.io.tmpdir",".") + "\\XYChart.cfg";
fileCfg = openFile(sFileCfg);
if (fileCfg.exists()) {
    msgCfg = read(fileCfg);
    Scanner scanner = new Scanner(msgCfg);
    if (scanner.hasNextLine())
    {
        msg = scanner.nextLine();    
        printf(msg + "\n");
        if (msg.length() > 0) {
            sCfgChartName = msg;
        }
    }
    if (scanner.hasNextLine())
    {
        msg = scanner.nextLine();    
        printf(msg + "\n");
        if (msg.length() > 0) {
            sCfgResolution = msg;
        }
    }
    if (scanner.hasNextLine())
    {
        msg = scanner.nextLine();    
        printf(msg + "\n");
        if (msg.length() > 0) {
            sCfgFieldName = msg;
        }
    }
} 
close(fileCfg);

textCfgChartName = new JTextField(sCfgChartName);
textCfgChartName.setToolTipText("i.e. 'PrtProfile' or 'Test' or 'PrtProfile;ms'");
textCfgResolution = new JTextField(sCfgResolution);
textCfgFieldName = new JTextField(sCfgFieldName);

dirOut = new File(sSaveFolder);
FileUtils.forceMkdir(dirOut);
FileUtils.cleanDirectory(dirOut); 

msg = sprintf("U");
write(msg);
do {
    msg = read(500);
    printf("--> " + msg + "\n");
} while (msg.startsWith("HS"));
if (msg.length() > 0)
{
	int iMajorVers;
	int iMinorVers;
	int iBuildNum;

	String[] tokens = msg.split("[;]");
	String[] tokens2 = tokens[2].split("[V .]");

	iMajorVers = Integer.parseInt(tokens2[1]);
	iMinorVers = Integer.parseInt(tokens2[2]);
	try {	    
	    iBuildNum = Integer.parseInt(tokens2[4].substring(2));
	}
	catch (Exception e) {
		iBuildNum = Integer.parseInt(tokens2[5].substring(2));
	}	

	printf("%i.%i Build %i\n", iMajorVers, iMinorVers, iBuildNum);
	
	if ( (iMajorVers > 1) ||
	     ((iMajorVers == 1) && (iMinorVers > 73)) ||
	     ((iMajorVers == 1) && (iMinorVers == 73) && (iBuildNum >= 16)) )
	{
		bNewProto = true;
	}
}

if (bNewProto)
{
	msg = sprintf("FHBX--rX");
	printf("<-- " + msg + "\n");
	write(msg);	

	do
	{
	    msg = read(500);
	    printf("--> " + msg + "\n");
	} while ( msg.startsWith("HSXYChart;Vals") 
	          || msg.startsWith("HSXYChart;Begin") 
	          || msg.startsWith("HSXYChart;End") );

	if (msg.startsWith("HSTerminated"))
	{
		sleep(2000);
	}

	msg = sprintf("FHBA--rX" + textCfgChartName.getText());
	printf("<-- " + msg + "\n");
	write(msg);
	
	msg = read();
	printf(msg + "\n");

	msg = sprintf("FHXAA-r" + textCfgResolution.getText());
	printf("<-- " + msg + "\n");
	write(msg);
	msg = read();
	printf("1: " + msg + "\n");
}
else
{
	msg = sprintf("FHA---r0");
	printf("<-- " + msg + "\n");
	write(msg);
	
	msg = read(500);
	printf("--> " + msg + "\n");
	
	while (msg.length() > 0)
	{
	    msg = read(1);
	    printf("<-- " + msg + "\n");
	}

	sleep(1000);
	
	msg = "FHA---r2";
	printf("<-- " + msg + "\n");
	write(msg);
	
	msg = read();
	printf(msg + "\n");
	
	msg = sprintf("FHM---rX" + textCfgChartName.getText());
	printf("<-- " + msg + "\n");
	write(msg);
	msg = read();
	printf("1: " + msg + "\n");
}

while (msg.startsWith("HSXYChart;Vals") || msg.startsWith("HSXYChart;Begin")) {
    msg = read(500);
    printf("1: " + msg + "\n");
};

if (msg.length() > 0) {
    String[] tokens = msg.split("[\\-\\:]");

    if (tokens[0].compareTo("HSXYChart;Name") == 0) {

        fileOut = openFile(sSaveFolder + iFileNum + ".txt");
        fileOut.delete();
        s =  msg + "\n";
        write(fileOut, s.getBytes());
        close(fileOut);
        iFileNum++;
    	
        for (i=1; i<tokens.length; i++) {
            if (tokens[i].compareTo("ChartName") == 0) {
                sChartName = new String(tokens[i+1]);
            }
            else if (tokens[i].compareTo("XNameAndUnit") == 0) {
                sXNameAndUnit = new String(tokens[i+1]);
            }
            else if (tokens[i].compareTo("YUnit") == 0) {
                sYUnit = new String(tokens[i+1]);
            }
            else if (tokens[i].compareTo("Y1Name") == 0) {
                sY1Name = new String(tokens[i+1]);
                seriesY1 = new XYSeries(sY1Name);
                bY1 = true;
            }
            else if (tokens[i].compareTo("Y2Name") == 0) {
                sY2Name = new String(tokens[i+1]);
                seriesY2 = new XYSeries(sY2Name);
                bY2 = true;
            }
            else if (tokens[i].compareTo("Y3Name") == 0) {
                sY3Name = new String(tokens[i+1]);
                seriesY3 = new XYSeries(sY3Name);
                bY3 = true;
            }
            else if (tokens[i].compareTo("Y4Name") == 0) {
                sY4Name = new String(tokens[i+1]);
                seriesY4 = new XYSeries(sY4Name);
                bY4 = true;
            }
            else if (tokens[i].compareTo("Y5Name") == 0) {
                sY5Name = new String(tokens[i+1]);
                seriesY5 = new XYSeries(sY5Name);
                bY5 = true;
            }
            else if (tokens[i].compareTo("Y6Name") == 0) {
                sY6Name = new String(tokens[i+1]);
                seriesY6 = new XYSeries(sY6Name);
                bY6 = true;
            }
            else if (tokens[i].compareTo("Y7Name") == 0) {
                sY7Name = new String(tokens[i+1]);
                seriesY7 = new XYSeries(sY7Name);
                bY7 = true;
            }
            else if (tokens[i].compareTo("Y8Name") == 0) {
                sY8Name = new String(tokens[i+1]);
                seriesY8 = new XYSeries(sY8Name);
                bY8 = true;
            }
            else if (tokens[i].compareTo("Y9Name") == 0) {
                sY9Name = new String(tokens[i+1]);
                seriesY9 = new XYSeries(sY9Name);
                bY9 = true;
            }
        }
    }
}

XYSeriesCollection dataset = new XYSeriesCollection();

JCheckBox checkY1Show = new JCheckBox(sY1Name, bY1);
JCheckBox checkY2Show = new JCheckBox(sY2Name, bY2);
JCheckBox checkY3Show = new JCheckBox(sY3Name, bY3);
JCheckBox checkY4Show = new JCheckBox(sY4Name, bY4);
JCheckBox checkY5Show = new JCheckBox(sY5Name, bY5);
JCheckBox checkY6Show = new JCheckBox(sY6Name, bY6);
JCheckBox checkY7Show = new JCheckBox(sY7Name, bY7);
JCheckBox checkY8Show = new JCheckBox(sY8Name, bY8);
JCheckBox checkY9Show = new JCheckBox(sY9Name, bY9);

if (bY1) dataset.addSeries(seriesY1);
if (bY2) dataset.addSeries(seriesY2);
if (bY3) dataset.addSeries(seriesY3);
if (bY4) dataset.addSeries(seriesY4);
if (bY5) dataset.addSeries(seriesY5);
if (bY6) dataset.addSeries(seriesY6);
if (bY7) dataset.addSeries(seriesY7);
if (bY8) dataset.addSeries(seriesY8);
if (bY9) dataset.addSeries(seriesY9);

JFreeChart chart = ChartFactory.createXYLineChart(
    sChartName,               // chart title
    sXNameAndUnit,            // x axis label
    sYUnit,                   // y axis label
    dataset,                  // data
    PlotOrientation.VERTICAL,
    true,                     // include legend
    true,                     // tooltips
    false                     // urls
);

ChartPanel chartPanel = new ChartPanel(chart);
XYPlot plot = chart.getXYPlot( );
XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer( );
renderer.setSeriesPaint( 0 , Color.BLACK );
renderer.setSeriesPaint( 1 , Color.PINK );
renderer.setSeriesPaint( 2 , Color.WHITE );
renderer.setSeriesPaint( 3 , Color.GRAY );
renderer.setSeriesPaint( 4 , Color.YELLOW );
renderer.setSeriesPaint( 5 , Color.MAGENTA );
renderer.setSeriesPaint( 6 , Color.RED );
renderer.setSeriesPaint( 7 , Color.BLUE );
plot.setRenderer( renderer ); 

sFrameChart = new JFrame();
sMainPanel = new JPanel();
sMainPanel.setLayout(new BorderLayout());
sMainPanel.add(chartPanel, BorderLayout.CENTER);

menuBar = new JMenuBar();
menuFile = new JMenu("File");
menuItemSave = new JMenuItem("Save");
menuItemSave.addActionListener(alSave);
menuFile.add(menuItemSave);
menuBar.add(menuFile);
sFrameChart.setJMenuBar(menuBar);

menuItemFilter = new JMenuItem("Filter");
menuItemFilter.addActionListener(alFilter);
menuFile.add(menuItemFilter);

menuItemOption = new JMenuItem("Option");
menuItemOption.addActionListener(alOption);
menuFile.add(menuItemOption);

sFrameChart.add(chartPanel);
sFrameChart.pack();
sFrameChart.setVisible(true);

int x = 0;

do {
    msg = read();
    printf("2: " + msg + "\n");
    if (bFileOutIsOpen) {
        String s =  msg + "\n";
        write(fileOut, s.getBytes());
    }
    
    if (msg.length() > 0) {

        msg = msg.replace(":-", ":~");
        // printf("3: " + msg + "\n");
        String[] tokens = msg.split("[\\;\\-\\:]");
        
        if (tokens[0].compareTo("HSXYChart") == 0) {

            for (i=1; i<tokens.length; i++) {
            
                if (tokens[i].compareTo("Begin") == 0) {
                    plot.clearAnnotations();
                    LegendTitle legendTitle = chart.getLegend();
                    chart.clearSubtitles();
                    chart.addLegend(legendTitle);
                    
                    if (bY1) seriesY1 = new XYSeries(sY1Name);
                    if (bY2) seriesY2 = new XYSeries(sY2Name);
                    if (bY3) seriesY3 = new XYSeries(sY3Name);
                    if (bY4) seriesY4 = new XYSeries(sY4Name);
                    if (bY5) seriesY5 = new XYSeries(sY5Name);
                    if (bY6) seriesY6 = new XYSeries(sY6Name);
                    if (bY7) seriesY7 = new XYSeries(sY7Name);
                    if (bY8) seriesY8 = new XYSeries(sY8Name);
                    if (bY9) seriesY9 = new XYSeries(sY9Name);

                    x = 0;

                    fileOut = openFile(sSaveFolder + iFileNum + ".txt");
                    fileOut.delete();
                    s =  msg + "\n";
                    write(fileOut, s.getBytes());
                    bFileOutIsOpen = true;
                }

                if (tokens[i].compareTo("RecName") == 0) {
                    chart.addSubtitle(0, new TextTitle(tokens[i+1]));				
                }
                
                if (tokens[i].compareTo("XVal") == 0) {
                    x = Integer.parseInt(tokens[i+1]);
                }

                if (tokens[i].compareTo("Y1Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y1 = Integer.parseInt(tok);
                    seriesY1.add(x, y1);
                }
                if (tokens[i].compareTo("Y2Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y2 = Integer.parseInt(tok);
                    seriesY2.add(x, y2);
                }
                if (tokens[i].compareTo("Y3Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y3 = Integer.parseInt(tok);
                    seriesY3.add(x, y3);
                }
                if (tokens[i].compareTo("Y4Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y4 = Integer.parseInt(tok);
                    seriesY4.add(x, y4);
                }
                if (tokens[i].compareTo("Y5Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y5 = Integer.parseInt(tok);
                    seriesY5.add(x, y5);
                }
                if (tokens[i].compareTo("Y6Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y6 = Integer.parseInt(tok);
                    seriesY6.add(x, y6);
                }
                if (tokens[i].compareTo("Y7Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y7 = Integer.parseInt(tok);
                    seriesY7.add(x, y7);
                }
                if (tokens[i].compareTo("Y8Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y8 = Integer.parseInt(tok);
                    seriesY8.add(x, y8);
                }
                if (tokens[i].compareTo("Y9Val") == 0) {
                	tok = tokens[i+1].replace('~', '-');
                    y9 = Integer.parseInt(tok);
                    seriesY9.add(x, y9);
                }

                if (tokens[i].compareTo("Y1Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y1+20);
                    plot.addAnnotation(textXY);                    
                }

                if (tokens[i].compareTo("Y2Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y2+20);
                    plot.addAnnotation(textXY);                    
                }

                if (tokens[i].compareTo("Y3Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y3+20);
                    plot.addAnnotation(textXY);                    
                }

                if (tokens[i].compareTo("Y4Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y4+20);
                    plot.addAnnotation(textXY);                    
                }

                if (tokens[i].compareTo("Y5Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y5+20);
                    plot.addAnnotation(textXY);
                }

                if (tokens[i].compareTo("Y6Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y6+20);
                    plot.addAnnotation(textXY);
                }

                if (tokens[i].compareTo("Y7Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y7+20);
                    plot.addAnnotation(textXY);
                }

                if (tokens[i].compareTo("Y8Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y8+20);
                    plot.addAnnotation(textXY);                    
                }

                if (tokens[i].compareTo("Y9Text") == 0) {
                	tok = tokens[i+1];
                    XYTextAnnotation textXY = new XYTextAnnotation(tok, x, y9+20);
                    plot.addAnnotation(textXY);
                }
                
                if (tokens[i].compareTo("End") == 0) {   
                    dataset.removeAllSeries();           	
                    if (checkY1Show.isSelected()) dataset.addSeries(seriesY1);
                    if (checkY2Show.isSelected()) dataset.addSeries(seriesY2);
                    if (checkY3Show.isSelected()) dataset.addSeries(seriesY3);
                    if (checkY4Show.isSelected()) dataset.addSeries(seriesY4);
                    if (checkY5Show.isSelected()) dataset.addSeries(seriesY5);
                    if (checkY6Show.isSelected()) dataset.addSeries(seriesY6);
                    if (checkY7Show.isSelected()) dataset.addSeries(seriesY7);
                    if (checkY8Show.isSelected()) dataset.addSeries(seriesY8);
                    if (checkY9Show.isSelected()) dataset.addSeries(seriesY9);

                    close(fileOut);
                    bFileOutIsOpen = false;
                    iFileNum++;
                }
            
            }
          
        }

    }
} while(sFrameChart.isShowing());

if (bNewProto)
{
    msg = sprintf("FHBX--rX");
}
else
{
	msg = sprintf("FHA---r0");
}
printf("<-- " + msg + "\n");
write(msg);

msg = read(200);
printf("<-- " + msg + "\n");

while (msg.compareTo("HSTerminated") != 0)
{
    msg = read(200);
    printf("<-- " + msg + "\n");
}
